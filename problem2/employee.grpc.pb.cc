// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: employee.proto

#include "employee.pb.h"
#include "employee.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace employee {

static const char* EmployeeService_method_names[] = {
  "/employee.EmployeeService/AddEmployee",
  "/employee.EmployeeService/GetAllListEmployees",
  "/employee.EmployeeService/DeleteEmployeeById",
  "/employee.EmployeeService/SetEmployeePosition",
  "/employee.EmployeeService/SetEmployeeManagerId",
  "/employee.EmployeeService/GetEmployeeById",
};

std::unique_ptr< EmployeeService::Stub> EmployeeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EmployeeService::Stub> stub(new EmployeeService::Stub(channel, options));
  return stub;
}

EmployeeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AddEmployee_(EmployeeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllListEmployees_(EmployeeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DeleteEmployeeById_(EmployeeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEmployeePosition_(EmployeeService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEmployeeManagerId_(EmployeeService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEmployeeById_(EmployeeService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EmployeeService::Stub::AddEmployee(::grpc::ClientContext* context, const ::employee::Employee& request, ::employee::Employee* response) {
  return ::grpc::internal::BlockingUnaryCall< ::employee::Employee, ::employee::Employee, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddEmployee_, context, request, response);
}

void EmployeeService::Stub::async::AddEmployee(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::Employee* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::employee::Employee, ::employee::Employee, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddEmployee_, context, request, response, std::move(f));
}

void EmployeeService::Stub::async::AddEmployee(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::Employee* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddEmployee_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::employee::Employee>* EmployeeService::Stub::PrepareAsyncAddEmployeeRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::employee::Employee, ::employee::Employee, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddEmployee_, context, request);
}

::grpc::ClientAsyncResponseReader< ::employee::Employee>* EmployeeService::Stub::AsyncAddEmployeeRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddEmployeeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::employee::Employee>* EmployeeService::Stub::GetAllListEmployeesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::employee::Employee>::Create(channel_.get(), rpcmethod_GetAllListEmployees_, context, request);
}

void EmployeeService::Stub::async::GetAllListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::employee::Employee>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::employee::Employee>::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllListEmployees_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::employee::Employee>* EmployeeService::Stub::AsyncGetAllListEmployeesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::employee::Employee>::Create(channel_.get(), cq, rpcmethod_GetAllListEmployees_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::employee::Employee>* EmployeeService::Stub::PrepareAsyncGetAllListEmployeesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::employee::Employee>::Create(channel_.get(), cq, rpcmethod_GetAllListEmployees_, context, request, false, nullptr);
}

::grpc::Status EmployeeService::Stub::DeleteEmployeeById(::grpc::ClientContext* context, const ::employee::Employee& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::employee::Employee, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteEmployeeById_, context, request, response);
}

void EmployeeService::Stub::async::DeleteEmployeeById(::grpc::ClientContext* context, const ::employee::Employee* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::employee::Employee, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteEmployeeById_, context, request, response, std::move(f));
}

void EmployeeService::Stub::async::DeleteEmployeeById(::grpc::ClientContext* context, const ::employee::Employee* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteEmployeeById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmployeeService::Stub::PrepareAsyncDeleteEmployeeByIdRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::employee::Employee, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteEmployeeById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EmployeeService::Stub::AsyncDeleteEmployeeByIdRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteEmployeeByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmployeeService::Stub::SetEmployeePosition(::grpc::ClientContext* context, const ::employee::PositionRequest& request, ::employee::Employee* response) {
  return ::grpc::internal::BlockingUnaryCall< ::employee::PositionRequest, ::employee::Employee, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetEmployeePosition_, context, request, response);
}

void EmployeeService::Stub::async::SetEmployeePosition(::grpc::ClientContext* context, const ::employee::PositionRequest* request, ::employee::Employee* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::employee::PositionRequest, ::employee::Employee, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEmployeePosition_, context, request, response, std::move(f));
}

void EmployeeService::Stub::async::SetEmployeePosition(::grpc::ClientContext* context, const ::employee::PositionRequest* request, ::employee::Employee* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEmployeePosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::employee::Employee>* EmployeeService::Stub::PrepareAsyncSetEmployeePositionRaw(::grpc::ClientContext* context, const ::employee::PositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::employee::Employee, ::employee::PositionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetEmployeePosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::employee::Employee>* EmployeeService::Stub::AsyncSetEmployeePositionRaw(::grpc::ClientContext* context, const ::employee::PositionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetEmployeePositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmployeeService::Stub::SetEmployeeManagerId(::grpc::ClientContext* context, const ::employee::ManagerIdRequest& request, ::employee::Employee* response) {
  return ::grpc::internal::BlockingUnaryCall< ::employee::ManagerIdRequest, ::employee::Employee, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetEmployeeManagerId_, context, request, response);
}

void EmployeeService::Stub::async::SetEmployeeManagerId(::grpc::ClientContext* context, const ::employee::ManagerIdRequest* request, ::employee::Employee* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::employee::ManagerIdRequest, ::employee::Employee, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEmployeeManagerId_, context, request, response, std::move(f));
}

void EmployeeService::Stub::async::SetEmployeeManagerId(::grpc::ClientContext* context, const ::employee::ManagerIdRequest* request, ::employee::Employee* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEmployeeManagerId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::employee::Employee>* EmployeeService::Stub::PrepareAsyncSetEmployeeManagerIdRaw(::grpc::ClientContext* context, const ::employee::ManagerIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::employee::Employee, ::employee::ManagerIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetEmployeeManagerId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::employee::Employee>* EmployeeService::Stub::AsyncSetEmployeeManagerIdRaw(::grpc::ClientContext* context, const ::employee::ManagerIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetEmployeeManagerIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmployeeService::Stub::GetEmployeeById(::grpc::ClientContext* context, const ::employee::Employee& request, ::employee::Employee* response) {
  return ::grpc::internal::BlockingUnaryCall< ::employee::Employee, ::employee::Employee, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEmployeeById_, context, request, response);
}

void EmployeeService::Stub::async::GetEmployeeById(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::Employee* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::employee::Employee, ::employee::Employee, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEmployeeById_, context, request, response, std::move(f));
}

void EmployeeService::Stub::async::GetEmployeeById(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::Employee* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEmployeeById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::employee::Employee>* EmployeeService::Stub::PrepareAsyncGetEmployeeByIdRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::employee::Employee, ::employee::Employee, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEmployeeById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::employee::Employee>* EmployeeService::Stub::AsyncGetEmployeeByIdRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEmployeeByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

EmployeeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmployeeService::Service, ::employee::Employee, ::employee::Employee, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmployeeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::employee::Employee* req,
             ::employee::Employee* resp) {
               return service->AddEmployee(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< EmployeeService::Service, ::google::protobuf::Empty, ::employee::Employee>(
          [](EmployeeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::employee::Employee>* writer) {
               return service->GetAllListEmployees(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmployeeService::Service, ::employee::Employee, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmployeeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::employee::Employee* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteEmployeeById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmployeeService::Service, ::employee::PositionRequest, ::employee::Employee, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmployeeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::employee::PositionRequest* req,
             ::employee::Employee* resp) {
               return service->SetEmployeePosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmployeeService::Service, ::employee::ManagerIdRequest, ::employee::Employee, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmployeeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::employee::ManagerIdRequest* req,
             ::employee::Employee* resp) {
               return service->SetEmployeeManagerId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmployeeService::Service, ::employee::Employee, ::employee::Employee, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmployeeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::employee::Employee* req,
             ::employee::Employee* resp) {
               return service->GetEmployeeById(ctx, req, resp);
             }, this)));
}

EmployeeService::Service::~Service() {
}

::grpc::Status EmployeeService::Service::AddEmployee(::grpc::ServerContext* context, const ::employee::Employee* request, ::employee::Employee* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmployeeService::Service::GetAllListEmployees(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::employee::Employee>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmployeeService::Service::DeleteEmployeeById(::grpc::ServerContext* context, const ::employee::Employee* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmployeeService::Service::SetEmployeePosition(::grpc::ServerContext* context, const ::employee::PositionRequest* request, ::employee::Employee* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmployeeService::Service::SetEmployeeManagerId(::grpc::ServerContext* context, const ::employee::ManagerIdRequest* request, ::employee::Employee* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmployeeService::Service::GetEmployeeById(::grpc::ServerContext* context, const ::employee::Employee* request, ::employee::Employee* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace employee

