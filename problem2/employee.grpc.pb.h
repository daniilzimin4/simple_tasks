// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: employee.proto
#ifndef GRPC_employee_2eproto__INCLUDED
#define GRPC_employee_2eproto__INCLUDED

#include "employee.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace employee {

class EmployeeService final {
 public:
  static constexpr char const* service_full_name() {
    return "employee.EmployeeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AddEmployee(::grpc::ClientContext* context, const ::employee::Employee& request, ::employee::Employee* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>> AsyncAddEmployee(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>>(AsyncAddEmployeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>> PrepareAsyncAddEmployee(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>>(PrepareAsyncAddEmployeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::employee::Employee>> GetAllListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::employee::Employee>>(GetAllListEmployeesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::employee::Employee>> AsyncGetAllListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::employee::Employee>>(AsyncGetAllListEmployeesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::employee::Employee>> PrepareAsyncGetAllListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::employee::Employee>>(PrepareAsyncGetAllListEmployeesRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteEmployeeById(::grpc::ClientContext* context, const ::employee::Employee& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteEmployeeById(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteEmployeeByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteEmployeeById(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteEmployeeByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status SetEmployeePosition(::grpc::ClientContext* context, const ::employee::PositionRequest& request, ::employee::Employee* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>> AsyncSetEmployeePosition(::grpc::ClientContext* context, const ::employee::PositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>>(AsyncSetEmployeePositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>> PrepareAsyncSetEmployeePosition(::grpc::ClientContext* context, const ::employee::PositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>>(PrepareAsyncSetEmployeePositionRaw(context, request, cq));
    }
    virtual ::grpc::Status SetEmployeeManagerId(::grpc::ClientContext* context, const ::employee::ManagerIdRequest& request, ::employee::Employee* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>> AsyncSetEmployeeManagerId(::grpc::ClientContext* context, const ::employee::ManagerIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>>(AsyncSetEmployeeManagerIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>> PrepareAsyncSetEmployeeManagerId(::grpc::ClientContext* context, const ::employee::ManagerIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>>(PrepareAsyncSetEmployeeManagerIdRaw(context, request, cq));
    }
    virtual ::grpc::Status GetEmployeeById(::grpc::ClientContext* context, const ::employee::Employee& request, ::employee::Employee* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>> AsyncGetEmployeeById(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>>(AsyncGetEmployeeByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>> PrepareAsyncGetEmployeeById(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>>(PrepareAsyncGetEmployeeByIdRaw(context, request, cq));
    }
    // Добавьте остальные методы сервиса по мере необходимости
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AddEmployee(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::Employee* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddEmployee(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::Employee* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::employee::Employee>* reactor) = 0;
      virtual void DeleteEmployeeById(::grpc::ClientContext* context, const ::employee::Employee* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteEmployeeById(::grpc::ClientContext* context, const ::employee::Employee* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetEmployeePosition(::grpc::ClientContext* context, const ::employee::PositionRequest* request, ::employee::Employee* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetEmployeePosition(::grpc::ClientContext* context, const ::employee::PositionRequest* request, ::employee::Employee* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetEmployeeManagerId(::grpc::ClientContext* context, const ::employee::ManagerIdRequest* request, ::employee::Employee* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetEmployeeManagerId(::grpc::ClientContext* context, const ::employee::ManagerIdRequest* request, ::employee::Employee* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetEmployeeById(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::Employee* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEmployeeById(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::Employee* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Добавьте остальные методы сервиса по мере необходимости
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>* AsyncAddEmployeeRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>* PrepareAsyncAddEmployeeRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::employee::Employee>* GetAllListEmployeesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::employee::Employee>* AsyncGetAllListEmployeesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::employee::Employee>* PrepareAsyncGetAllListEmployeesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteEmployeeByIdRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteEmployeeByIdRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>* AsyncSetEmployeePositionRaw(::grpc::ClientContext* context, const ::employee::PositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>* PrepareAsyncSetEmployeePositionRaw(::grpc::ClientContext* context, const ::employee::PositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>* AsyncSetEmployeeManagerIdRaw(::grpc::ClientContext* context, const ::employee::ManagerIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>* PrepareAsyncSetEmployeeManagerIdRaw(::grpc::ClientContext* context, const ::employee::ManagerIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>* AsyncGetEmployeeByIdRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::Employee>* PrepareAsyncGetEmployeeByIdRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AddEmployee(::grpc::ClientContext* context, const ::employee::Employee& request, ::employee::Employee* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::Employee>> AsyncAddEmployee(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::Employee>>(AsyncAddEmployeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::Employee>> PrepareAsyncAddEmployee(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::Employee>>(PrepareAsyncAddEmployeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::employee::Employee>> GetAllListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::employee::Employee>>(GetAllListEmployeesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::employee::Employee>> AsyncGetAllListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::employee::Employee>>(AsyncGetAllListEmployeesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::employee::Employee>> PrepareAsyncGetAllListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::employee::Employee>>(PrepareAsyncGetAllListEmployeesRaw(context, request, cq));
    }
    ::grpc::Status DeleteEmployeeById(::grpc::ClientContext* context, const ::employee::Employee& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteEmployeeById(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteEmployeeByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteEmployeeById(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteEmployeeByIdRaw(context, request, cq));
    }
    ::grpc::Status SetEmployeePosition(::grpc::ClientContext* context, const ::employee::PositionRequest& request, ::employee::Employee* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::Employee>> AsyncSetEmployeePosition(::grpc::ClientContext* context, const ::employee::PositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::Employee>>(AsyncSetEmployeePositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::Employee>> PrepareAsyncSetEmployeePosition(::grpc::ClientContext* context, const ::employee::PositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::Employee>>(PrepareAsyncSetEmployeePositionRaw(context, request, cq));
    }
    ::grpc::Status SetEmployeeManagerId(::grpc::ClientContext* context, const ::employee::ManagerIdRequest& request, ::employee::Employee* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::Employee>> AsyncSetEmployeeManagerId(::grpc::ClientContext* context, const ::employee::ManagerIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::Employee>>(AsyncSetEmployeeManagerIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::Employee>> PrepareAsyncSetEmployeeManagerId(::grpc::ClientContext* context, const ::employee::ManagerIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::Employee>>(PrepareAsyncSetEmployeeManagerIdRaw(context, request, cq));
    }
    ::grpc::Status GetEmployeeById(::grpc::ClientContext* context, const ::employee::Employee& request, ::employee::Employee* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::Employee>> AsyncGetEmployeeById(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::Employee>>(AsyncGetEmployeeByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::Employee>> PrepareAsyncGetEmployeeById(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::Employee>>(PrepareAsyncGetEmployeeByIdRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AddEmployee(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::Employee* response, std::function<void(::grpc::Status)>) override;
      void AddEmployee(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::Employee* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::employee::Employee>* reactor) override;
      void DeleteEmployeeById(::grpc::ClientContext* context, const ::employee::Employee* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteEmployeeById(::grpc::ClientContext* context, const ::employee::Employee* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetEmployeePosition(::grpc::ClientContext* context, const ::employee::PositionRequest* request, ::employee::Employee* response, std::function<void(::grpc::Status)>) override;
      void SetEmployeePosition(::grpc::ClientContext* context, const ::employee::PositionRequest* request, ::employee::Employee* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetEmployeeManagerId(::grpc::ClientContext* context, const ::employee::ManagerIdRequest* request, ::employee::Employee* response, std::function<void(::grpc::Status)>) override;
      void SetEmployeeManagerId(::grpc::ClientContext* context, const ::employee::ManagerIdRequest* request, ::employee::Employee* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetEmployeeById(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::Employee* response, std::function<void(::grpc::Status)>) override;
      void GetEmployeeById(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::Employee* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::employee::Employee>* AsyncAddEmployeeRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::employee::Employee>* PrepareAsyncAddEmployeeRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::employee::Employee>* GetAllListEmployeesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) override;
    ::grpc::ClientAsyncReader< ::employee::Employee>* AsyncGetAllListEmployeesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::employee::Employee>* PrepareAsyncGetAllListEmployeesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteEmployeeByIdRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteEmployeeByIdRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::employee::Employee>* AsyncSetEmployeePositionRaw(::grpc::ClientContext* context, const ::employee::PositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::employee::Employee>* PrepareAsyncSetEmployeePositionRaw(::grpc::ClientContext* context, const ::employee::PositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::employee::Employee>* AsyncSetEmployeeManagerIdRaw(::grpc::ClientContext* context, const ::employee::ManagerIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::employee::Employee>* PrepareAsyncSetEmployeeManagerIdRaw(::grpc::ClientContext* context, const ::employee::ManagerIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::employee::Employee>* AsyncGetEmployeeByIdRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::employee::Employee>* PrepareAsyncGetEmployeeByIdRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddEmployee_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllListEmployees_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteEmployeeById_;
    const ::grpc::internal::RpcMethod rpcmethod_SetEmployeePosition_;
    const ::grpc::internal::RpcMethod rpcmethod_SetEmployeeManagerId_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEmployeeById_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddEmployee(::grpc::ServerContext* context, const ::employee::Employee* request, ::employee::Employee* response);
    virtual ::grpc::Status GetAllListEmployees(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::employee::Employee>* writer);
    virtual ::grpc::Status DeleteEmployeeById(::grpc::ServerContext* context, const ::employee::Employee* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status SetEmployeePosition(::grpc::ServerContext* context, const ::employee::PositionRequest* request, ::employee::Employee* response);
    virtual ::grpc::Status SetEmployeeManagerId(::grpc::ServerContext* context, const ::employee::ManagerIdRequest* request, ::employee::Employee* response);
    virtual ::grpc::Status GetEmployeeById(::grpc::ServerContext* context, const ::employee::Employee* request, ::employee::Employee* response);
    // Добавьте остальные методы сервиса по мере необходимости
  };
  template <class BaseClass>
  class WithAsyncMethod_AddEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddEmployee() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmployee(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddEmployee(::grpc::ServerContext* context, ::employee::Employee* request, ::grpc::ServerAsyncResponseWriter< ::employee::Employee>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllListEmployees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllListEmployees() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetAllListEmployees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllListEmployees(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::employee::Employee>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllListEmployees(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncWriter< ::employee::Employee>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteEmployeeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteEmployeeById() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteEmployeeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEmployeeById(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEmployeeById(::grpc::ServerContext* context, ::employee::Employee* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetEmployeePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetEmployeePosition() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetEmployeePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeePosition(::grpc::ServerContext* /*context*/, const ::employee::PositionRequest* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEmployeePosition(::grpc::ServerContext* context, ::employee::PositionRequest* request, ::grpc::ServerAsyncResponseWriter< ::employee::Employee>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetEmployeeManagerId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetEmployeeManagerId() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetEmployeeManagerId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeeManagerId(::grpc::ServerContext* /*context*/, const ::employee::ManagerIdRequest* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEmployeeManagerId(::grpc::ServerContext* context, ::employee::ManagerIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::employee::Employee>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEmployeeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEmployeeById() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetEmployeeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEmployeeById(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEmployeeById(::grpc::ServerContext* context, ::employee::Employee* request, ::grpc::ServerAsyncResponseWriter< ::employee::Employee>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddEmployee<WithAsyncMethod_GetAllListEmployees<WithAsyncMethod_DeleteEmployeeById<WithAsyncMethod_SetEmployeePosition<WithAsyncMethod_SetEmployeeManagerId<WithAsyncMethod_GetEmployeeById<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AddEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddEmployee() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::employee::Employee, ::employee::Employee>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::employee::Employee* request, ::employee::Employee* response) { return this->AddEmployee(context, request, response); }));}
    void SetMessageAllocatorFor_AddEmployee(
        ::grpc::MessageAllocator< ::employee::Employee, ::employee::Employee>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::employee::Employee, ::employee::Employee>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmployee(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddEmployee(
      ::grpc::CallbackServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::Employee* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllListEmployees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllListEmployees() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::google::protobuf::Empty, ::employee::Employee>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request) { return this->GetAllListEmployees(context, request); }));
    }
    ~WithCallbackMethod_GetAllListEmployees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllListEmployees(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::employee::Employee>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::employee::Employee>* GetAllListEmployees(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteEmployeeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteEmployeeById() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::employee::Employee, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::employee::Employee* request, ::google::protobuf::Empty* response) { return this->DeleteEmployeeById(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteEmployeeById(
        ::grpc::MessageAllocator< ::employee::Employee, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::employee::Employee, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteEmployeeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEmployeeById(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteEmployeeById(
      ::grpc::CallbackServerContext* /*context*/, const ::employee::Employee* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetEmployeePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetEmployeePosition() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::employee::PositionRequest, ::employee::Employee>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::employee::PositionRequest* request, ::employee::Employee* response) { return this->SetEmployeePosition(context, request, response); }));}
    void SetMessageAllocatorFor_SetEmployeePosition(
        ::grpc::MessageAllocator< ::employee::PositionRequest, ::employee::Employee>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::employee::PositionRequest, ::employee::Employee>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetEmployeePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeePosition(::grpc::ServerContext* /*context*/, const ::employee::PositionRequest* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetEmployeePosition(
      ::grpc::CallbackServerContext* /*context*/, const ::employee::PositionRequest* /*request*/, ::employee::Employee* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetEmployeeManagerId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetEmployeeManagerId() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::employee::ManagerIdRequest, ::employee::Employee>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::employee::ManagerIdRequest* request, ::employee::Employee* response) { return this->SetEmployeeManagerId(context, request, response); }));}
    void SetMessageAllocatorFor_SetEmployeeManagerId(
        ::grpc::MessageAllocator< ::employee::ManagerIdRequest, ::employee::Employee>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::employee::ManagerIdRequest, ::employee::Employee>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetEmployeeManagerId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeeManagerId(::grpc::ServerContext* /*context*/, const ::employee::ManagerIdRequest* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetEmployeeManagerId(
      ::grpc::CallbackServerContext* /*context*/, const ::employee::ManagerIdRequest* /*request*/, ::employee::Employee* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEmployeeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEmployeeById() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::employee::Employee, ::employee::Employee>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::employee::Employee* request, ::employee::Employee* response) { return this->GetEmployeeById(context, request, response); }));}
    void SetMessageAllocatorFor_GetEmployeeById(
        ::grpc::MessageAllocator< ::employee::Employee, ::employee::Employee>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::employee::Employee, ::employee::Employee>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEmployeeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEmployeeById(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEmployeeById(
      ::grpc::CallbackServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::Employee* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AddEmployee<WithCallbackMethod_GetAllListEmployees<WithCallbackMethod_DeleteEmployeeById<WithCallbackMethod_SetEmployeePosition<WithCallbackMethod_SetEmployeeManagerId<WithCallbackMethod_GetEmployeeById<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddEmployee() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmployee(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllListEmployees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllListEmployees() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetAllListEmployees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllListEmployees(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::employee::Employee>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteEmployeeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteEmployeeById() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteEmployeeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEmployeeById(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetEmployeePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetEmployeePosition() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetEmployeePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeePosition(::grpc::ServerContext* /*context*/, const ::employee::PositionRequest* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetEmployeeManagerId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetEmployeeManagerId() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetEmployeeManagerId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeeManagerId(::grpc::ServerContext* /*context*/, const ::employee::ManagerIdRequest* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEmployeeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEmployeeById() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetEmployeeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEmployeeById(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddEmployee() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmployee(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddEmployee(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllListEmployees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllListEmployees() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetAllListEmployees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllListEmployees(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::employee::Employee>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllListEmployees(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteEmployeeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteEmployeeById() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteEmployeeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEmployeeById(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEmployeeById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetEmployeePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetEmployeePosition() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetEmployeePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeePosition(::grpc::ServerContext* /*context*/, const ::employee::PositionRequest* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEmployeePosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetEmployeeManagerId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetEmployeeManagerId() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetEmployeeManagerId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeeManagerId(::grpc::ServerContext* /*context*/, const ::employee::ManagerIdRequest* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEmployeeManagerId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEmployeeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEmployeeById() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetEmployeeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEmployeeById(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEmployeeById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddEmployee() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddEmployee(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmployee(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddEmployee(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllListEmployees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllListEmployees() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetAllListEmployees(context, request); }));
    }
    ~WithRawCallbackMethod_GetAllListEmployees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllListEmployees(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::employee::Employee>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetAllListEmployees(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteEmployeeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteEmployeeById() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteEmployeeById(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteEmployeeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEmployeeById(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteEmployeeById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetEmployeePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetEmployeePosition() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetEmployeePosition(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetEmployeePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeePosition(::grpc::ServerContext* /*context*/, const ::employee::PositionRequest* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetEmployeePosition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetEmployeeManagerId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetEmployeeManagerId() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetEmployeeManagerId(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetEmployeeManagerId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeeManagerId(::grpc::ServerContext* /*context*/, const ::employee::ManagerIdRequest* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetEmployeeManagerId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEmployeeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEmployeeById() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEmployeeById(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEmployeeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEmployeeById(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEmployeeById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddEmployee() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::employee::Employee, ::employee::Employee>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::employee::Employee, ::employee::Employee>* streamer) {
                       return this->StreamedAddEmployee(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddEmployee(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddEmployee(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::employee::Employee,::employee::Employee>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteEmployeeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteEmployeeById() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::employee::Employee, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::employee::Employee, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteEmployeeById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteEmployeeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteEmployeeById(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteEmployeeById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::employee::Employee,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetEmployeePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetEmployeePosition() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::employee::PositionRequest, ::employee::Employee>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::employee::PositionRequest, ::employee::Employee>* streamer) {
                       return this->StreamedSetEmployeePosition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetEmployeePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetEmployeePosition(::grpc::ServerContext* /*context*/, const ::employee::PositionRequest* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetEmployeePosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::employee::PositionRequest,::employee::Employee>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetEmployeeManagerId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetEmployeeManagerId() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::employee::ManagerIdRequest, ::employee::Employee>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::employee::ManagerIdRequest, ::employee::Employee>* streamer) {
                       return this->StreamedSetEmployeeManagerId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetEmployeeManagerId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetEmployeeManagerId(::grpc::ServerContext* /*context*/, const ::employee::ManagerIdRequest* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetEmployeeManagerId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::employee::ManagerIdRequest,::employee::Employee>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEmployeeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEmployeeById() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::employee::Employee, ::employee::Employee>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::employee::Employee, ::employee::Employee>* streamer) {
                       return this->StreamedGetEmployeeById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEmployeeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEmployeeById(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEmployeeById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::employee::Employee,::employee::Employee>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddEmployee<WithStreamedUnaryMethod_DeleteEmployeeById<WithStreamedUnaryMethod_SetEmployeePosition<WithStreamedUnaryMethod_SetEmployeeManagerId<WithStreamedUnaryMethod_GetEmployeeById<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetAllListEmployees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetAllListEmployees() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::google::protobuf::Empty, ::employee::Employee>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::google::protobuf::Empty, ::employee::Employee>* streamer) {
                       return this->StreamedGetAllListEmployees(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetAllListEmployees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllListEmployees(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::employee::Employee>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetAllListEmployees(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::protobuf::Empty,::employee::Employee>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetAllListEmployees<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddEmployee<WithSplitStreamingMethod_GetAllListEmployees<WithStreamedUnaryMethod_DeleteEmployeeById<WithStreamedUnaryMethod_SetEmployeePosition<WithStreamedUnaryMethod_SetEmployeeManagerId<WithStreamedUnaryMethod_GetEmployeeById<Service > > > > > > StreamedService;
};

}  // namespace employee


#endif  // GRPC_employee_2eproto__INCLUDED
